// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: order.sql

package entities

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addDelayReports = `-- name: AddDelayReports :one
insert into delay_report (description, order_id)
values ($1, $2)
returning id
`

type AddDelayReportsParams struct {
	Description pgtype.Text `db:"description" json:"description"`
	OrderID     pgtype.Int4 `db:"order_id" json:"order_id"`
}

func (q *Queries) AddDelayReports(ctx context.Context, db DBTX, arg AddDelayReportsParams) (int32, error) {
	row := db.QueryRow(ctx, addDelayReports, arg.Description, arg.OrderID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const assignOrderToAgent = `-- name: AssignOrderToAgent :exec
update delay_report
set agent_id = $1
where id = $2
`

type AssignOrderToAgentParams struct {
	AgentID pgtype.Int4 `db:"agent_id" json:"agent_id"`
	ID      int32       `db:"id" json:"id"`
}

func (q *Queries) AssignOrderToAgent(ctx context.Context, db DBTX, arg AssignOrderToAgentParams) error {
	_, err := db.Exec(ctx, assignOrderToAgent, arg.AgentID, arg.ID)
	return err
}

const getAllDelaysInLastWeek = `-- name: GetAllDelaysInLastWeek :many
select v.slug, sum(extract(epoch from o.delivered_at - o.time_delivery)) as delay_amount
from vendor v
         join "order" o on v.id = o.vendor_id
         join delay_report d on d.order_id = o.id
where o.created_at < now() - interval '1 week'
group by v.slug
order by 2 desc
`

type GetAllDelaysInLastWeekRow struct {
	Slug        string `db:"slug" json:"slug"`
	DelayAmount int64  `db:"delay_amount" json:"delay_amount"`
}

func (q *Queries) GetAllDelaysInLastWeek(ctx context.Context, db DBTX) ([]GetAllDelaysInLastWeekRow, error) {
	rows, err := db.Query(ctx, getAllDelaysInLastWeek)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllDelaysInLastWeekRow
	for rows.Next() {
		var i GetAllDelaysInLastWeekRow
		if err := rows.Scan(&i.Slug, &i.DelayAmount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTripStatusByOrderId = `-- name: GetTripStatusByOrderId :one
select t.status
from "order" o
         join "trip" t on o.id = t.order_id
where o.id = $1
`

func (q *Queries) GetTripStatusByOrderId(ctx context.Context, db DBTX, id int32) (string, error) {
	row := db.QueryRow(ctx, getTripStatusByOrderId, id)
	var status string
	err := row.Scan(&status)
	return status, err
}
